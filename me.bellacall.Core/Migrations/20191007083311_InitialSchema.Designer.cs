// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using me.bellacall.Core.Data;

namespace me.bellacall.Core.Migrations
{
    [DbContext(typeof(AspNetDbContext))]
    [Migration("20191007083311_InitialSchema")]
    partial class InitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<int>("PermissibleLevel");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetRolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Operation");

                    b.Property<long>("RoleId");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRolePermissions");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<long>("Company_Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("Level");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Company_Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Campaign_Id");

                    b.Property<long?>("Data_Id");

                    b.Property<string>("Data_Json");

                    b.Property<int>("Operation");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("TimeStamp");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.HasIndex("TimeStamp");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogs");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Campaign_Id");

                    b.Property<long>("RoleId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserToken", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Campaign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Company_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long>("Tariff_Id");

                    b.HasKey("Id");

                    b.HasIndex("Company_Id");

                    b.HasIndex("Tariff_Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.DEF", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<long>("Provider_Id");

                    b.Property<long>("Region_Id");

                    b.HasKey("Id");

                    b.HasIndex("Provider_Id");

                    b.HasIndex("Region_Id");

                    b.ToTable("DEFs");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.MNP", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<long>("Provider_Id");

                    b.Property<long>("Region_Id");

                    b.HasKey("Id");

                    b.HasIndex("Provider_Id");

                    b.HasIndex("Region_Id");

                    b.ToTable("MNPs");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.Tariff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowEnjoy");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.TariffCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateStart");

                    b.Property<DateTime>("DateStop");

                    b.Property<decimal>("Price");

                    b.Property<int>("Rule");

                    b.Property<long>("Tariff_Id");

                    b.Property<int>("Unit");

                    b.HasKey("Id");

                    b.HasIndex("Tariff_Id");

                    b.ToTable("TariffConditions");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.CompanyExpense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<long>("Company_Id");

                    b.Property<string>("Note")
                        .HasMaxLength(256);

                    b.Property<long>("TariffCondition_Id");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("Company_Id");

                    b.HasIndex("TariffCondition_Id");

                    b.ToTable("CompanyExpenses");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.CompanyIncome", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<long>("Company_Id");

                    b.Property<string>("Note")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Company_Id");

                    b.ToTable("CompanyIncomes");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate");

                    b.Property<long>("ContactGroup_Id");

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<string>("FirstName")
                        .HasMaxLength(32);

                    b.Property<int?>("Gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(32);

                    b.Property<string>("Patronymic")
                        .HasMaxLength(32);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Properties");

                    b.Property<int?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ContactGroup_Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ContactGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Campaign_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.ToTable("ContactGroups");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ContactProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Campaign_Id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.ToTable("ContactProperties");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Gateway", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Campaign_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("RegistrationType");

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.ToTable("Gateways");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.GatewayStream", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Gateway_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("TrunkCount");

                    b.Property<int>("TrunkType");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("Gateway_Id");

                    b.ToTable("GatewayStreams");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.InboxScript", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Job_Id");

                    b.Property<long>("Script_Id");

                    b.HasKey("Id");

                    b.HasIndex("Job_Id");

                    b.HasIndex("Script_Id");

                    b.ToTable("InboxScripts");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowInbox");

                    b.Property<bool>("AllowJob");

                    b.Property<long>("Campaign_Id");

                    b.Property<int>("DialDensity");

                    b.Property<int>("DialDuration");

                    b.Property<int>("DialEfforts");

                    b.Property<int>("DialInterval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Region_Id");

                    b.Property<TimeSpan>("TimeStart");

                    b.Property<TimeSpan>("TimeStop");

                    b.Property<string>("TimeZoneCustom")
                        .HasMaxLength(128);

                    b.Property<int>("TimeZoneType");

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.HasIndex("Region_Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.JobContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Contact_Id");

                    b.Property<long>("Job_Id");

                    b.Property<DateTime?>("LastAttemptDate");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("Contact_Id");

                    b.HasIndex("Job_Id");

                    b.ToTable("JobContacts");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.JobScript", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Job_Id");

                    b.Property<long>("Script_Id");

                    b.HasKey("Id");

                    b.HasIndex("Job_Id");

                    b.HasIndex("Script_Id");

                    b.ToTable("JobScripts");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Lead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Campaign_Id");

                    b.Property<string>("Properties");

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.LeadContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Contact_Id");

                    b.Property<long>("Lead_Id");

                    b.HasKey("Id");

                    b.HasIndex("Contact_Id");

                    b.HasIndex("Lead_Id");

                    b.ToTable("LeadContacts");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.LeadProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Campaign_Id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.ToTable("LeadProperties");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Script", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Campaign_Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Campaign_Id");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CaseElement_Id");

                    b.Property<string>("CaseExpression");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("ScriptElement_Id");

                    b.HasKey("Id");

                    b.HasIndex("CaseElement_Id");

                    b.HasIndex("ScriptElement_Id");

                    b.ToTable("ScriptConditions");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptElement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Script_Id");

                    b.Property<int>("XPos");

                    b.Property<int>("YPos");

                    b.HasKey("Id");

                    b.HasIndex("Script_Id");

                    b.ToTable("ScriptElements");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptInputParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataType");

                    b.Property<string>("Expression");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("ScriptElement_Id");

                    b.HasKey("Id");

                    b.HasIndex("ScriptElement_Id");

                    b.ToTable("ScriptInputParameters");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptOutputParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataType");

                    b.Property<string>("Expression");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("ScriptElement_Id");

                    b.HasKey("Id");

                    b.HasIndex("ScriptElement_Id");

                    b.ToTable("ScriptOutputParameters");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Script_Id");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("Script_Id");

                    b.ToTable("ScriptProperties");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptVariable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Script_Id");

                    b.HasKey("Id");

                    b.HasIndex("Script_Id");

                    b.ToTable("ScriptVariables");
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetRoleClaim", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.AspNetRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetRolePermission", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.AspNetRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUser", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserClaim", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserLog", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("Campaign_Id");

                    b.HasOne("me.bellacall.Core.Data.AspNetUser", "User")
                        .WithMany("UserLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserLogin", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserRole", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("Campaign_Id");

                    b.HasOne("me.bellacall.Core.Data.AspNetRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.AspNetUserToken", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Campaign", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Company", "Company")
                        .WithMany("Campaigns")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Common.Tariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("Tariff_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.DEF", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Common.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("Provider_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Common.Region", "Region")
                        .WithMany()
                        .HasForeignKey("Region_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.MNP", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Common.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("Provider_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Common.Region", "Region")
                        .WithMany()
                        .HasForeignKey("Region_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Common.TariffCondition", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Common.Tariff", "Tariff")
                        .WithMany("TariffConditions")
                        .HasForeignKey("Tariff_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.CompanyExpense", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Company", "Company")
                        .WithMany("CompanyExpenses")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Common.TariffCondition", "TariffCondition")
                        .WithMany()
                        .HasForeignKey("TariffCondition_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.CompanyIncome", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Company", "Company")
                        .WithMany("CompanyIncomes")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Contact", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.ContactGroup", "ContactGroup")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactGroup_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ContactGroup", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany("ContactGroups")
                        .HasForeignKey("Campaign_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ContactProperty", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany("ContactProperties")
                        .HasForeignKey("Campaign_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Gateway", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany("Gateways")
                        .HasForeignKey("Campaign_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.GatewayStream", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Gateway", "Gateway")
                        .WithMany("GatewayStreams")
                        .HasForeignKey("Gateway_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.InboxScript", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Job", "Job")
                        .WithMany("InboxScripts")
                        .HasForeignKey("Job_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Script", "Script")
                        .WithMany()
                        .HasForeignKey("Script_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Job", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany("Jobs")
                        .HasForeignKey("Campaign_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Common.Region", "Region")
                        .WithMany()
                        .HasForeignKey("Region_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.JobContact", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("Contact_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Job", "Job")
                        .WithMany("JobContacts")
                        .HasForeignKey("Job_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.JobScript", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Job", "Job")
                        .WithMany("JobScripts")
                        .HasForeignKey("Job_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Script", "Script")
                        .WithMany()
                        .HasForeignKey("Script_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Lead", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany("Leads")
                        .HasForeignKey("Campaign_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.LeadContact", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("Contact_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.Lead", "Lead")
                        .WithMany("LeadContacts")
                        .HasForeignKey("Lead_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.LeadProperty", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany("LeadProperties")
                        .HasForeignKey("Campaign_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.Script", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Campaign", "Campaign")
                        .WithMany("Scripts")
                        .HasForeignKey("Campaign_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptCondition", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.ScriptElement", "CaseElement")
                        .WithMany()
                        .HasForeignKey("CaseElement_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("me.bellacall.Core.Data.ScriptElement", "ScriptElement")
                        .WithMany("ScriptConditions")
                        .HasForeignKey("ScriptElement_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptElement", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Script", "Script")
                        .WithMany("ScriptElements")
                        .HasForeignKey("Script_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptInputParameter", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.ScriptElement", "ScriptElement")
                        .WithMany("ScriptInputParameters")
                        .HasForeignKey("ScriptElement_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptOutputParameter", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.ScriptElement", "ScriptElement")
                        .WithMany("ScriptOutputParameters")
                        .HasForeignKey("ScriptElement_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptProperty", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Script", "Script")
                        .WithMany("ScriptProperties")
                        .HasForeignKey("Script_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("me.bellacall.Core.Data.ScriptVariable", b =>
                {
                    b.HasOne("me.bellacall.Core.Data.Script", "Script")
                        .WithMany("ScriptVariables")
                        .HasForeignKey("Script_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
